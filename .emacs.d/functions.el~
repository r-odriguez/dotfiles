(defun transpose-windows ()
  "Transpose two windows.  If more or less than two windows are visible, error."
  (interactive)
  (unless (= 2 (count-windows))
    (error "There are not 2 windows."))
  (let* ((windows (window-list))
         (w1 (car windows))
         (w2 (nth 1 windows))
         (w1b (window-buffer w1))
         (w2b (window-buffer w2)))
    (set-window-buffer w1 w2b)
    (set-window-buffer w2 w1b)))

(defun my/mode-header-line ()
  (interactive)
  ;; (setq mode-line-format "")
  (setq header-line-format mode-line-format))

(defun my/horizontal-recenter ()
  "make the point horizontally centered in the window"
  (interactive)
  (let ((mid (/ (window-width) 2))
        (line-len (save-excursion (end-of-line) (current-column)))
        (cur (current-column)))
    (if (< mid cur)
        (set-window-hscroll (selected-window)
                            (- cur mid)))))

(defun my/god-mode-update-cursor-type ()
  (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))

(defun my/pixel-scroll-down ()
  (interactive)
  (pixel-scroll-precision-interpolate (- (/ (window-text-height nil t) 2))
                                      nil 1))

(defun my/pixel-scroll-up ()
  (interactive)
  (pixel-scroll-precision-interpolate (/ (window-text-height nil t) 2)
                                      nil 1))

(defun my/forward-page ()
  (interactive)
  (forward-page)
  (recenter-top-bottom 0))

(defun my/backward-page ()
  (interactive)
  (backward-page)
  (recenter-top-bottom 0))

(defun my/olivetti-settings ()
  (interactive)
  (setq olivetti-body-width 90)
  (setq olivetti-set-width 90)
  (setq olivetti-recall-visual-line-mode-entry-state t)
  (setq olivetti-style 'fancy)
  (setq truncate-lines t)
  (olivetti-mode))

(defun my/magit-settings ()
  (interactive)
  (setq display-line-numbers nil))

(defun my/compilation-settings ()
  (interactive)
  (setq display-line-numbers nil)
  (visual-line-mode))

(defun my/org-settings ()
  (face-remap-add-relative 'default '(:height 250))
  (set-face-attribute 'org-document-title nil :height 1.9)
  (set-face-attribute 'org-level-1 nil :height 1.4)
  (set-face-attribute 'org-level-2 nil :height 1.3)
  (set-face-attribute 'org-level-3 nil :height 1.2)
  (set-face-attribute 'org-level-4 nil :height 1.1)
  (set-face-attribute 'org-verbatim nil :family "FantasqueSansM Nerd Font")
  (set-face-attribute 'org-block nil :family "FantasqueSansM Nerd Font")
  (set-face-attribute 'org-block-begin-line nil :family "FantasqueSansM Nerd Font")
  (set-face-attribute 'org-table nil :family "FantasqueSansM Nerd Font")
  (setq org-hide-emphasis-markers t)
  (setq display-line-numbers nil)
  (setq word-wrap 1)
  (setq line-spacing 8)
  ;; (setq olivetti-body-width 68)
  ;; (setq olivetti-recall-visual-line-mode-entry-state t)
  ;; (setq olivetti-style 'fancy)
  ;; (setq truncate-lines t)
  ;; (olivetti-mode)
  (page-break-lines-mode)
  (org-indent-mode)
  (org-modern-mode)
  (visual-line-mode)
  (darkroom-mode))

(defun my/org-present-start ()
  (visual-fill-column-mode 1)
  (visual-line-mode 1)
  (darkroom-mode)
  (darkroom-mode)
  (setq header-line-format " "))

(defun my/org-next-heading ()
  (outline-next-visible-heading 1)
  (recenter-top-bottom 10))

(defun my/org-prev-heading ()
  (outline-next-visible-heading -1)
  (recenter-top-bottom 10))

(define-key org-mode-map (kbd "C-c C-n") 'my/org-next-heading)
(define-key org-mode-map (kbd "C-c C-p") 'my/org-prev-heading)

(defun my/org-present-end ()
  (visual-fill-column-mode 0)
  (visual-line-mode 0)
  (setq header-line-format nil))

(defun my/org-present-prepare-slide (buffer-name heading)
  (org-overview)
  (org-show-entry)
  (org-show-children))
